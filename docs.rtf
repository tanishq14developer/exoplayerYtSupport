{\rtf1\ansi\ansicpg1252\cocoartf2638
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red191\green100\blue38;\red32\green32\blue32;\red153\green168\blue186;
\red88\green118\blue71;\red254\green187\blue91;\red86\green132\blue173;\red26\green47\blue26;\red133\green96\blue154;
}
{\*\expandedcolortbl;;\csgenericrgb\c74902\c39216\c14902;\csgenericrgb\c12549\c12549\c12549;\csgenericrgb\c60000\c65882\c72941;
\csgenericrgb\c34510\c46275\c27843;\csgenericrgb\c99608\c73333\c35686;\csgenericrgb\c33725\c51765\c67843;\csgenericrgb\c10196\c18431\c10196;\csgenericrgb\c52157\c37647\c60392;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs26 \cf2 \cb3 val \cf4 videoUri =\cf5 "https://www.youtube.com/watch?v=zhf0tF1WRQw&ab_channel=ExamLounge"\
    \cf2 object \cf4 :YouTubeExtractor(requireContext())\{\
        \cf2 override fun \cf6 onExtractionComplete\cf4 (\
            ytFiles: SparseArray<YtFile>?\cf2 ,\
            \cf4 videoMeta: VideoMeta?\
        ) \{\
          \cf2 if \cf4 (ytFiles !=\cf2 null\cf4 )\{\
              \cf2 val \cf4 itag = \cf7 137\
              \cf2 val \cf4 audiotag = \cf7 140\
              \cf2 val \cf4 videoUrl = \cb8 ytFiles\cb3 [itag].
\f1\i \cf9 url\
              
\f0\i0 \cf2 val \cf4 audioUrl = \cb8 ytFiles\cb3 [audiotag].
\f1\i \cf9 url\
\
              
\f0\i0 \cf2 val \cf4 audioSource : MediaSource = ProgressiveMediaSource.Factory(DefaultHttpDataSource.Factory())\
                  .createMediaSource(MediaItem.fromUri(audioUrl))\
\
              \cf2 val \cf4 videoSource :MediaSource = ProgressiveMediaSource.Factory(DefaultHttpDataSource.Factory())\
                  .createMediaSource(MediaItem.fromUri(videoUrl))\
\
              \cf9 player\cf4 !!.setMediaSource(MergingMediaSource(\cf2 true,\cf4 videoSource\cf2 ,\cf4 audioSource)\cf2 ,true\cf4 )\
              \cf9 player\cf4 !!.prepare()\
              \cf9 player\cf4 !!.
\f1\i \cf9 playWhenReady 
\f0\i0 \cf4 = \cf9 playWhenReady\
              player\cf4 !!.seekTo(\cf9 currentWindow\cf2 ,\cf9 playBackPosition\cf4 )\
\
\
            \}\
        \}\
\
    \}.extract(videoUri\cf2 ,false,false\cf4 )\
\
\
\}\
\
\cf2 private fun \cf6 releasePlayer\cf4 ()\{\
    \cf2 if\cf4 (\cf9 player \cf4 !=\cf2 null\cf4 )\{\
        \cf9 playWhenReady \cf4 = \cf9 player\cf4 !!.
\f1\i \cf9 playWhenReady\
        
\f0\i0 playBackPosition \cf4 = \cf9 player\cf4 !!.
\f1\i \cf9 currentPosition\
        
\f0\i0 currentWindow \cf4 = \cf9 player\cf4 !!.
\f1\i \cf9 currentWindowIndex\
        
\f0\i0 player\cf4 !!.release()\
        \cf9 player \cf4 = \cf2 null\
    \cf4 \}\
\}\
\
}